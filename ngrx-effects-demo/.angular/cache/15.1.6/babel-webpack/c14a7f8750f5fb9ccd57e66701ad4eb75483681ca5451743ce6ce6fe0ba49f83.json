{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { mergeMap, map, catchError, concatMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport * as ProductActions from './product.actions';\nlet ProductEffects = class ProductEffects {\n  constructor(actions$, productService) {\n    this.actions$ = actions$;\n    this.productService = productService;\n    this.loadProducts$ = createEffect(() => {\n      return this.actions$.pipe(ofType(ProductActions.loadProducts), mergeMap(() => this.productService.getProducts().pipe(map(products => ProductActions.loadProductsSuccess({\n        products\n      })), catchError(error => of(ProductActions.loadProductsFailure({\n        error\n      }))))));\n    });\n    this.updateProduct$ = createEffect(() => {\n      return this.actions$.pipe(ofType(ProductActions.updateProduct), concatMap(action => this.productService.updateProduct(action.product).pipe(map(product => ProductActions.updateProductSuccess({\n        product\n      })), catchError(error => of(ProductActions.updateProductFailure({\n        error\n      }))))));\n    });\n    this.createProduct$ = createEffect(() => {\n      return this.actions$.pipe(ofType(ProductActions.createProduct), concatMap(action => this.productService.createProduct(action.product).pipe(map(product => ProductActions.createProductSuccess({\n        product\n      })), catchError(error => of(ProductActions.createProductFailure({\n        error\n      }))))));\n    });\n    this.deleteProduct$ = createEffect(() => {\n      return this.actions$.pipe(ofType(ProductActions.deleteProduct), mergeMap(action => this.productService.deleteProduct(action.productId).pipe(map(() => ProductActions.deleteProductSuccess({\n        productId: action.productId\n      })), catchError(error => of(ProductActions.deleteProductFailure({\n        error\n      }))))));\n    });\n  }\n};\nProductEffects = __decorate([Injectable()], ProductEffects);\nexport { ProductEffects };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}