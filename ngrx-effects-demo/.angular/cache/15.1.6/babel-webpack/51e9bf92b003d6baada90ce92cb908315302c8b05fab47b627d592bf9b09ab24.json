{"ast":null,"code":"import { createReducer, on, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as ProductActions from './product.actions';\nconst initialState = {\n  showProductCode: true,\n  currentProductId: null,\n  products: [],\n  error: ''\n};\nconst getProductFeatureState = createFeatureSelector('products');\nexport const getShowProductCode = createSelector(getProductFeatureState, state => state.showProductCode);\nexport const getCurrentProductId = createSelector(getProductFeatureState, state => state.currentProductId);\nexport const getCurrentProduct = createSelector(getProductFeatureState, getCurrentProductId, (state, currentProductId) => {\n  if (currentProductId === 0) {\n    return {\n      id: 0,\n      productName: '',\n      productCode: 'New',\n      description: '',\n      starRating: 0\n    };\n  } else {\n    return currentProductId ? state.products.find(p => p.id === currentProductId) : null;\n  }\n});\nexport const getProducts = createSelector(getProductFeatureState, state => state.products);\nexport const getError = createSelector(getProductFeatureState, state => state.error);\nexport const productReducer = createReducer(initialState, on(ProductActions.toggleProductCode, state => {\n  return Object.assign(Object.assign({}, state), {\n    showProductCode: !state.showProductCode\n  });\n}), on(ProductActions.setCurrentProduct, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    currentProductId: action.currentProductId\n  });\n}), on(ProductActions.clearCurrentProduct, state => {\n  return Object.assign(Object.assign({}, state), {\n    currentProductId: null\n  });\n}), on(ProductActions.initializeCurrentProduct, state => {\n  return Object.assign(Object.assign({}, state), {\n    currentProductId: 0\n  });\n}), on(ProductActions.loadProductsSuccess, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    products: action.products,\n    nextAction: \"add\",\n    error: ''\n  });\n}), on(ProductActions.loadProductsFailure, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    products: [],\n    error: action.error\n  });\n}), on(ProductActions.updateProductSuccess, (state, action) => {\n  const updatedProducts = state.products.map(item => action.product.id === item.id ? action.product : item);\n  return Object.assign(Object.assign({}, state), {\n    products: updatedProducts,\n    currentProductId: action.product.id,\n    error: ''\n  });\n}), on(ProductActions.updateProductFailure, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    error: action.error\n  });\n}),\n// After a create, the currentProduct is the new product.\non(ProductActions.createProductSuccess, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    products: [...state.products, action.product],\n    currentProductId: action.product.id,\n    error: ''\n  });\n}), on(ProductActions.createProductFailure, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    error: action.error\n  });\n}),\n// After a delete, the currentProduct is null.\non(ProductActions.deleteProductSuccess, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    products: state.products.filter(product => product.id !== action.productId),\n    currentProductId: null,\n    error: ''\n  });\n}), on(ProductActions.deleteProductFailure, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    error: action.error\n  });\n}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}